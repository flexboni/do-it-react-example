// 05-2 하이어오더 컴포넌트 기초 개념 공부하기

// * 디자인 패턴 : 코드 중 활용도가 높은 구현 방식을 모아둔 비밀 레시피와 같다.
// * 상속 패턴보다 데코레이터 패턴이 필요한 이유?
//   - 상속패턴 : 공통 기능은 부모로부터 물려받고, 추가 기능만 구현하여 중복 코드의 양을 줄일 수 있는 장점이 있다
//     하지만 여러 부모의 속성을 동시에 가질 경우 문제점이 발생한다
// * 데코레이터 패턴(Decorator Pattern) : 클래스 간의 종속성이 없는 기능만 공유함. (ex. 자바의 인터페이스)
// * 하이어오더 컴포넌트(고차함수 : Higher-order function) : 기존 컴포넌트에 기능을 덧입혀 새 컴포넌트로 반환하는 함수.
//   (ex. 게임 캐릭터(기존 컴포넌트)가 장비(기능)를 착용하면 더욱 강해짐(새 컴포넌트))
//   - 기존 컴포넌트에 연결된 프로퍼티를 모두 전달해야 한다. (ex. {...props, ...this.props})
//   - 하이어오더 컴퍼넌트와 확장 컴포넌트의 이름은 'with'로 시작한다.
